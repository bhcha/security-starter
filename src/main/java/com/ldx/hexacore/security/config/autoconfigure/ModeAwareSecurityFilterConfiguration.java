package com.ldx.hexacore.security.config.autoconfigure;

import com.ldx.hexacore.security.config.properties.SecurityStarterProperties;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

/**
 * ModeÎ≥Ñ Ï∞®Î≥ÑÌôîÎêú Security Filter ÏÑ§Ï†ï
 * 
 * <p>Traditional/Hexagonal Î™®ÎìúÏóê Îî∞Îùº Îã§Î•∏ Î≥¥Ïïà Ï†ïÏ±ÖÏùÑ Ï†ÅÏö©Ìï©ÎãàÎã§.
 * 
 * @since 1.0.0
 */
@Slf4j
@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
@ConditionalOnClass(SecurityFilterChain.class)
@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)
public class ModeAwareSecurityFilterConfiguration {
    
    private final SecurityStarterProperties properties;
    
    /**
     * ModeÎ≥Ñ SecurityFilterChain ÏÉùÏÑ±
     */
    @Bean
    @ConditionalOnMissingBean(name = "modeAwareSecurityFilterChain")
    public SecurityFilterChain modeAwareSecurityFilterChain(HttpSecurity http) throws Exception {
        log.info("ModeÎ≥Ñ Security Filter ÏÑ§Ï†ï Ï§ë: {}", properties.getMode());
        
        switch (properties.getMode()) {
            case TRADITIONAL:
                configureTraditionalMode(http);
                break;
            case HEXAGONAL:
                configureHexagonalMode(http);
                break;
            default:
                configureTraditionalMode(http);
                break;
        }
        
        return http.build();
    }
    
    /**
     * Traditional Î™®Îìú ÏÑ§Ï†ï
     * - Í∞ÑÎã®Ìïú Î≥¥Ïïà ÏÑ§Ï†ï
     * - Îπ†Î•∏ Í∞úÎ∞ú Ï§ëÏã¨
     */
    private void configureTraditionalMode(HttpSecurity http) throws Exception {
        log.info("üìå Traditional Î™®Îìú Security ÏÑ§Ï†ï Ï†ÅÏö©");
        
        http
            // CSRF ÎπÑÌôúÏÑ±Ìôî (Í∞úÎ∞ú Ìé∏ÏùòÏÑ±)
            .csrf(csrf -> csrf.disable())
            
            // ÏÑ∏ÏÖò Ï†ïÏ±Ö - TraditionalÏùÄ ÏÑ∏ÏÖò ÏÇ¨Ïö© Í∞ÄÎä•
            .sessionManagement(session -> {
                if (properties.isSessionEnabled()) {
                    session.sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED);
                    log.debug("  - ÏÑ∏ÏÖò Í¥ÄÎ¶¨: ÌôúÏÑ±Ìôî (IF_REQUIRED)");
                } else {
                    session.sessionCreationPolicy(SessionCreationPolicy.STATELESS);
                    log.debug("  - ÏÑ∏ÏÖò Í¥ÄÎ¶¨: ÎπÑÌôúÏÑ±Ìôî (STATELESS)");
                }
            })
            
            // Í∂åÌïú ÏÑ§Ï†ï - Í∏∞Î≥∏Ï†ÅÏúºÎ°ú Ïó¥Î†§ÏûàÏùå
            .authorizeHttpRequests(authz -> authz
                .requestMatchers("/api/public/**", "/health/**", "/actuator/**").permitAll()
                .requestMatchers("/api/admin/**").hasRole("ADMIN")
                .anyRequest().authenticated()
            )
            
            // Exception Ï≤òÎ¶¨ - Í∞ÑÎã®Ìïú ÏùëÎãµ
            .exceptionHandling(exception -> exception
                .authenticationEntryPoint((request, response, authException) -> {
                    response.setStatus(401);
                    response.setContentType("application/json");
                    response.getWriter().write("{\"error\":\"Unauthorized\",\"mode\":\"TRADITIONAL\"}");
                })
            );
        
        // JWT ÌïÑÌÑ∞ Ï∂îÍ∞Ä (ÌôúÏÑ±ÌôîÎêú Í≤ΩÏö∞)
        if (properties.isJwtEnabled()) {
            log.debug("  - JWT ÌïÑÌÑ∞: ÌôúÏÑ±Ìôî");
            // JWT ÌïÑÌÑ∞Îäî Î≥ÑÎèÑ ConfigurationÏóêÏÑú Ï∂îÍ∞ÄÎê®
        }
        
        log.info("  ‚úì Traditional Î™®Îìú ÏÑ§Ï†ï ÏôÑÎ£å");
    }
    
    /**
     * Hexagonal Î™®Îìú ÏÑ§Ï†ï
     * - ÏóÑÍ≤©Ìïú Î≥¥Ïïà Ï†ïÏ±Ö
     * - Î†àÏù¥Ïñ¥Î≥Ñ Ï†ëÍ∑º Ï†úÏñ¥
     */
    private void configureHexagonalMode(HttpSecurity http) throws Exception {
        log.info("üî∑ Hexagonal Î™®Îìú Security ÏÑ§Ï†ï Ï†ÅÏö©");
        
        http
            // CSRF Î≥¥Ìò∏ ÌôúÏÑ±Ìôî (Production Í∂åÏû•)
            .csrf(csrf -> {
                if (isProductionProfile()) {
                    csrf.ignoringRequestMatchers("/api/public/**");
                    log.debug("  - CSRF Î≥¥Ìò∏: ÌôúÏÑ±Ìôî (Production)");
                } else {
                    csrf.disable();
                    log.debug("  - CSRF Î≥¥Ìò∏: ÎπÑÌôúÏÑ±Ìôî (Development)");
                }
            })
            
            // ÏÑ∏ÏÖò Ï†ïÏ±Ö - HexagonalÏùÄ Í∏∞Î≥∏Ï†ÅÏúºÎ°ú Stateless
            .sessionManagement(session -> {
                session.sessionCreationPolicy(SessionCreationPolicy.STATELESS);
                log.debug("  - ÏÑ∏ÏÖò Í¥ÄÎ¶¨: STATELESS (JWT Í∏∞Î∞ò)");
            })
            
            // Í∂åÌïú ÏÑ§Ï†ï - ÏóÑÍ≤©Ìïú Ï†ëÍ∑º Ï†úÏñ¥
            .authorizeHttpRequests(authz -> authz
                // Public endpoints
                .requestMatchers("/api/public/**").permitAll()
                .requestMatchers("/health/**", "/actuator/health/**").permitAll()
                
                // Domain Layer endpoints (Ï†úÌïúÏ†Å)
                .requestMatchers("/api/domain/**").denyAll()  // DomainÏùÄ ÏßÅÏ†ë ÎÖ∏Ï∂ú ÏïàÌï®
                
                // Application Layer endpoints
                .requestMatchers("/api/application/**").hasAnyRole("USER", "ADMIN")
                
                // Adapter Layer endpoints
                .requestMatchers("/api/adapter/**").hasRole("ADMIN")
                
                // Admin endpoints
                .requestMatchers("/api/admin/**").hasRole("ADMIN")
                
                // ÎÇòÎ®∏ÏßÄÎäî Ïù∏Ï¶ù ÌïÑÏöî
                .anyRequest().authenticated()
            )
            
            // Exception Ï≤òÎ¶¨ - RFC 7807 Problem Details
            .exceptionHandling(exception -> exception
                .authenticationEntryPoint((request, response, authException) -> {
                    response.setStatus(401);
                    response.setContentType("application/problem+json");
                    response.getWriter().write("""
                        {
                            "type": "https://hexacore.security/problems/unauthorized",
                            "title": "Unauthorized",
                            "status": 401,
                            "detail": "Authentication required",
                            "mode": "HEXAGONAL"
                        }
                        """);
                })
                .accessDeniedHandler((request, response, accessDeniedException) -> {
                    response.setStatus(403);
                    response.setContentType("application/problem+json");
                    response.getWriter().write("""
                        {
                            "type": "https://hexacore.security/problems/forbidden",
                            "title": "Forbidden",
                            "status": 403,
                            "detail": "Insufficient privileges",
                            "mode": "HEXAGONAL"
                        }
                        """);
                })
            )
            
            // Î≥¥Ïïà Ìó§Îçî Í∞ïÌôî
            .headers(headers -> headers
                .frameOptions(frame -> frame.deny())
                .contentSecurityPolicy(csp -> 
                    csp.policyDirectives("default-src 'self'; frame-ancestors 'none';"))
                .httpStrictTransportSecurity(hsts -> 
                    hsts.includeSubDomains(true).maxAgeInSeconds(31536000))
            );
        
        log.info("  ‚úì Hexagonal Î™®Îìú ÏÑ§Ï†ï ÏôÑÎ£å");
        log.info("  ‚úì Port-Adapter Ìå®ÌÑ¥ Í∏∞Î∞ò Ï†ëÍ∑º Ï†úÏñ¥ ÌôúÏÑ±Ìôî");
    }
    
    /**
     * Production ÌîÑÎ°úÌååÏùº ÌôïÏù∏
     */
    private boolean isProductionProfile() {
        String[] activeProfiles = System.getProperty("spring.profiles.active", "").split(",");
        for (String profile : activeProfiles) {
            if ("prod".equalsIgnoreCase(profile.trim()) || 
                "production".equalsIgnoreCase(profile.trim())) {
                return true;
            }
        }
        return false;
    }
    
    /**
     * ModeÎ≥Ñ Í∏∞Î≥∏ ÏÑ§Ï†ïÍ∞í Ï†úÍ≥µ
     */
    @Bean
    @ConditionalOnMissingBean
    public ModeDefaults modeDefaults() {
        ModeDefaults defaults = new ModeDefaults();
        
        switch (properties.getMode()) {
            case TRADITIONAL:
                defaults.setDefaultSessionTimeout(1800); // 30Î∂Ñ
                defaults.setDefaultTokenExpiry(3600);     // 1ÏãúÍ∞Ñ
                defaults.setStrictValidation(false);
                defaults.setEnableAuditLog(false);
                break;
                
            case HEXAGONAL:
                defaults.setDefaultSessionTimeout(900);   // 15Î∂Ñ
                defaults.setDefaultTokenExpiry(1800);     // 30Î∂Ñ
                defaults.setStrictValidation(true);
                defaults.setEnableAuditLog(true);
                break;
        }
        
        log.debug("Mode Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï: {}", defaults);
        return defaults;
    }
    
    /**
     * ModeÎ≥Ñ Í∏∞Î≥∏ ÏÑ§Ï†ïÍ∞í ÌÅ¥ÎûòÏä§
     */
    public static class ModeDefaults {
        private int defaultSessionTimeout;
        private int defaultTokenExpiry;
        private boolean strictValidation;
        private boolean enableAuditLog;
        
        // Getters and Setters
        public int getDefaultSessionTimeout() {
            return defaultSessionTimeout;
        }
        
        public void setDefaultSessionTimeout(int defaultSessionTimeout) {
            this.defaultSessionTimeout = defaultSessionTimeout;
        }
        
        public int getDefaultTokenExpiry() {
            return defaultTokenExpiry;
        }
        
        public void setDefaultTokenExpiry(int defaultTokenExpiry) {
            this.defaultTokenExpiry = defaultTokenExpiry;
        }
        
        public boolean isStrictValidation() {
            return strictValidation;
        }
        
        public void setStrictValidation(boolean strictValidation) {
            this.strictValidation = strictValidation;
        }
        
        public boolean isEnableAuditLog() {
            return enableAuditLog;
        }
        
        public void setEnableAuditLog(boolean enableAuditLog) {
            this.enableAuditLog = enableAuditLog;
        }
        
        @Override
        public String toString() {
            return "ModeDefaults{" +
                    "sessionTimeout=" + defaultSessionTimeout +
                    ", tokenExpiry=" + defaultTokenExpiry +
                    ", strictValidation=" + strictValidation +
                    ", auditLog=" + enableAuditLog +
                    '}';
        }
    }
}